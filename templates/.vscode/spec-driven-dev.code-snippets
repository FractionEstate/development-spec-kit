{
    "Spec Template": {
        "scope": "markdown",
        "prefix": "spec-template",
        "body": [
            "# ${1:Feature Name}",
            "",
            "## Overview",
            "",
            "${2:Brief description of what this feature does and why it's needed.}",
            "",
            "## User Stories",
            "",
            "### Primary User Story",
            "",
            "As a ${3:type of user}, I want ${4:goal} so that ${5:benefit}.",
            "",
            "### Additional User Stories",
            "",
            "- As a ${6:user type}, I want ${7:goal} so that ${8:benefit}",
            "",
            "## Functional Requirements",
            "",
            "### Core Requirements",
            "",
            "1. ${9:Core requirement 1}",
            "2. ${10:Core requirement 2}",
            "",
            "### Edge Cases",
            "",
            "- ${11:Edge case 1}",
            "- ${12:Edge case 2}",
            "",
            "## Non-Functional Requirements",
            "",
            "### Performance",
            "",
            "- ${13:Performance requirement}",
            "",
            "### Security",
            "",
            "- ${14:Security requirement}",
            "",
            "### Usability",
            "",
            "- ${15:Usability requirement}",
            "",
            "## Success Criteria",
            "",
            "### Definition of Done",
            "",
            "- [ ] ${16:Success criterion 1}",
            "- [ ] ${17:Success criterion 2}",
            "",
            "### Acceptance Criteria",
            "",
            "- [ ] ${18:Acceptance criterion 1}",
            "- [ ] ${19:Acceptance criterion 2}",
            "",
            "## Dependencies",
            "",
            "### Technical Dependencies",
            "",
            "- ${20:Technical dependency}",
            "",
            "### Business Dependencies",
            "",
            "- ${21:Business dependency}",
            "",
            "## Assumptions",
            "",
            "- ${22:Key assumption}",
            "",
            "## Constraints",
            "",
            "- ${23:Important constraint}",
            "",
            "## Out of Scope",
            "",
            "- ${24:What's explicitly not included}"
        ],
        "description": "Complete specification template for new features"
    },

    "Copilot Chat Context": {
        "scope": "markdown",
        "prefix": "copilot-context",
        "body": [
            "@workspace Spec-Driven Development session for .specify/specs/<feature>/.",
            "",
            "**Feature**: ${1:Feature name from spec.md}",
            "**Phase**: ${2:specify/clarify/plan/tasks/implement/analyze}",
            "**Authoritative Files**: ${3:.specify/specs/<feature>/spec.md, plan.md, tasks.md}",
            "**Constitution Guardrails**: .specify/memory/constitution.md section ${4:link or summary}",
            "",
            "**Request**: ${5:What you need Copilot to do}",
            "",
            "Ground your response in the spec, plan, tasks, and constitution so outputs stay aligned with SDD."
        ],
        "description": "Template for providing context to GitHub Copilot Chat"
    },

    "SDD Chat Request": {
        "scope": "markdown",
        "prefix": "sdd-chat",
        "body": [
            "@workspace Context for .specify/specs/<feature>/ in the Spec-Driven Development workflow:",
            "",
            "üìã **Feature**: ${1:Feature slug and scope}",
            "üéØ **Phase**: ${2:specify/clarify/plan/tasks/implement/analyze}",
            "üìÅ **Key Artifacts**: ${3:spec.md, plan.md, tasks.md, data-model.md}",
            "",
            "‚ùì **Request**: ${4:Specific outcome you need}",
            "",
            "Please align recommendations with:",
            "- Constitution guardrails in `.specify/memory/constitution.md`",
            "- Architecture decisions in `.specify/specs/<feature>/plan.md`",
            "- Execution steps in `.specify/specs/<feature>/tasks.md`",
            "- Spec-Driven Development best practices"
        ],
        "description": "Structured request template for Copilot Chat in SDD projects"
    },

    "Context-Aware Implementation": {
        "scope": "markdown",
        "prefix": "context-impl",
        "body": [
            "@workspace Implementing ${1:component-name} for ${2:feature-name}.",
            "",
            "**Implementation Context:**",
            "- üìã Specification: [${3:requirement-section}](./spec.md#${4:section-anchor})",
            "- üèóÔ∏è Architecture: [${5:architecture-pattern}](./plan.md#${6:plan-section})",
            "- ‚úÖ Current Task: [${7:task-id}](./tasks.md#${8:task-section})",
            "- üìê Standards: [${9:quality-standard}](../../memory/constitution.md#${10:standard-section})",
            "",
            "**Technical Requirements:**",
            "- Language/Framework: ${11:tech-stack}",
            "- Patterns: ${12:design-patterns}",
            "- Dependencies: ${13:required-components}",
            "- Testing: ${14:test-requirements}",
            "",
            "**Request:** ${15:specific implementation help needed}",
            "",
            "Please generate code that:",
            "- Follows our established architecture patterns",
            "- Meets the specification requirements exactly",
            "- Aligns with project quality standards",
            "- Integrates properly with existing components"
        ],
        "description": "Context-rich implementation request template"
    },

    "Reference Links Template": {
        "scope": "markdown",
        "prefix": "ref-links",
        "body": [
            "## üìö References & Resources",
            "",
            "### Project Documentation",
            "- `README-copilot.md` ‚Äî Premium Copilot onboarding playbook",
            "- `.github/copilot-instructions.md` ‚Äî Workflow & prompt guidance",
            "- `.github/copilot-context.md` ‚Äî Ready-to-send context patterns",
            "- `.github/copilot-references.md` ‚Äî Extended links and resources",
            "",
            "### Technical Resources",
            "- [GitHub Copilot Documentation](https://docs.github.com/en/copilot)",
            "- [VSCode Chat Guide](https://code.visualstudio.com/docs/copilot/copilot-chat)",
            "- [Workspace Context](https://code.visualstudio.com/docs/copilot/workspace-context)",
            "",
            "### Development Patterns",
            "- `spec-template.md` ‚Äî Canonical spec structure",
            "- `plan-template.md` ‚Äî Architecture and sequencing blueprint",
            "- `tasks-template.md` ‚Äî Implementation breakdown guide",
            "- `.vscode/spec-driven-dev.code-snippets` ‚Äî Context-aware markdown snippets",
            "",
            "### ${1:Additional Resources}",
            "- ${2:Custom reference 1}",
            "- ${3:Custom reference 2}"
        ],
        "description": "Comprehensive reference links template for documentation"
    },

    "Feature Bootstrap Checklist": {
        "scope": "markdown",
        "prefix": "feature-bootstrap",
        "body": [
            "## üöÄ Feature Bootstrap Walkthrough",
            "",
            "| Step | Command / Artifact | What to Provide | Output |",
            "|------|--------------------|-----------------|--------|",
            "| 0 | Gather Intent | Raw narrative, goals, constraints | Starting context for the feature |",
            "| 1 | `/specify` | Intent + constraints | `.specify/specs/<feature>/spec.md` with `[NEEDS CLARIFICATION]` markers |",
            "| 2 | `/clarify` | Answers to each marker | Updated `spec.md` without blockers |",
            "| 3 | `/plan` | Tech stack preferences, architectural guardrails | `plan.md`, optional `data-model.md`, risk notes |",
            "| 4 | `/tasks` | Confirmation the plan is stable | `tasks.md` outlining ordered work (with `[P]` parallel items) |",
            "| 5 | `/implement` | Reference to specific task IDs and plan sections | Implementation PRs plus updated `tasks.md` statuses |",
            "| 6 | `/analyze` | Pointers to spec/plan/tasks | Gap report ensuring alignment before reviews |",
            "",
            "Use this loop for every feature: intent ‚Üí spec ‚Üí clarifications ‚Üí plan ‚Üí tasks ‚Üí implementation ‚Üí analysis. Update the authoritative artifact after each step so Copilot never operates on stale context."
        ],
        "description": "Drop-in feature bootstrap checklist matching README playbook"
    },

    "Agent Tools Overview": {
        "scope": "markdown",
        "prefix": "agent-tools",
        "body": [
            "## üß∞ Agent tools & capabilities",
            "",
            "- File edits & creation (precise, minimal diffs)",
            "- Workspace search + targeted file reads",
            "- One-line terminal commands with summaries",
            "- VS Code tasks mirroring slash commands",
            "- Snippets insertion (e.g., `feature-bootstrap`)",
            "- Session TODO tracking on request",
            "- Optional: Jupyter notebooks + simple browser preview",
            "",
            "Tip: Be explicit in prompts‚Äîname files/paths and desired outcomes."
        ],
        "description": "Drop-in overview of what the chat agent can do and how to ask"
    }
}
